# Gerekli kütüphaneleri yükle (eğer yüklü değilse)
try:
    import reportlab
    from reportlab.platypus import SimpleDocTemplate # Ekledik
except ImportError:
    print("Gerekli 'reportlab' kütüphanesi kuruluyor...")
    !pip install reportlab
    print("Kurulum tamamlandı. Lütfen hücreyi tekrar çalıştırın.")
import math
import pandas as pd
import base64
import io
import ipywidgets as widgets
from datetime import datetime
from IPython.display import display, clear_output, HTML
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib import colors
from reportlab.platypus import Table, TableStyle, Paragraph, Spacer, SimpleDocTemplate, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT
from reportlab.lib.units import mm, inch
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import requests
from PIL import Image as PILImage

# === FONT AYARLARI === (Türkçe karakter desteği için)
try:
    # Arial fontunu yüklemeye çalış (Colab'de genellikle mevcut)
    pdfmetrics.registerFont(TTFont('Arial', 'Arial.ttf'))
    pdfmetrics.registerFont(TTFont('Arial-Bold', 'Arial Bold.ttf'))
    MAIN_FONT = 'Arial'
except:
    # Arial yoksa Helvetica kullan
    MAIN_FONT = 'Helvetica'

# === LOGO VE ŞİRKET BİLGİLERİ ===
LOGO_URL = "https://premiumpluscy.eu/wp-content/uploads/2024/05/pp-logo-2-1.png"
LINKTREE_URL = "https://linktr.ee/premiumplushome?utm_source=linktree_admin_share"
COMPANY_INFO = {
    "name": "PREMIUM PLUS CONSTRUCTION",
    "address": "Iasonos 1, 1082, Nicosia Cyprus",
    "email": "info@premiumpluscy.eu",
    "phone": "+35722584081, +35797550946",
    "website": "www.premiumpluscy.eu",
    "linktree": LINKTREE_URL
}

# === Arayüz Stili ===
display(HTML(f"""
<style>
    @import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;700&display=swap');
    
    * {{
        font-family: 'Open Sans', sans-serif !important;
    }}
    
    .widget-label {{ font-weight: bold; margin-top: 10px; }}
    h3 {{ 
        color: #2C3E50; 
        border-bottom: 2px solid #3498DB; 
        padding-bottom: 5px; 
        margin-top: 20px;
        font-weight: 700 !important;
    }}
    h4 {{ 
        color: #34495E; 
        margin-top: 15px;
        font-weight: 700 !important;
    }}
    .dataframe {{ 
        width: 100%; 
        border-collapse: collapse; 
        margin-top: 10px; 
        font-size: 14px;
    }}
    .dataframe th, .dataframe td {{ 
        border: 1px solid #ddd; 
        padding: 8px; 
        text-align: left; 
    }}
    .dataframe th {{ 
        background-color: #2C3E50; 
        color: white;
        font-weight: 700 !important;
    }}
    .pdf-button {{ 
        background-color: #2C3E50; 
        border: none; 
        color: white; 
        padding: 12px 24px; 
        text-align: center; 
        text-decoration: none; 
        display: inline-block; 
        font-size: 16px; 
        margin: 15px; 
        cursor: pointer; 
        border-radius: 5px; 
        transition: all 0.3s;
        font-weight: 700 !important;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    }}
    .pdf-button:hover {{ 
        background-color: #3498DB; 
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }}
    .pdf-container {{ 
        margin: 25px 0; 
        padding: 20px; 
        background-color: #f8f9fa; 
        border-radius: 10px; 
        text-align: center;
        border: 1px solid #dee2e6;
    }}
    .customer-section {{
        background-color: #e9f7fe;
        border: 1px solid #3498DB;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 20px;
    }}
    .warning {{ 
        color: #d9534f; 
        font-weight: bold; 
        background-color: #f2dede;
        padding: 10px;
        border-radius: 5px;
        border: 1px solid #ebccd1;
    }}
    .section-title {{
        background-color: #2C3E50;
        color: white;
        padding: 10px;
        border-radius: 5px;
        font-weight: 700 !important;
        margin-top: 20px;
    }}
    .price-table {{
        width: 100%;
        border-collapse: collapse;
        margin: 20px 0;
        font-size: 14px;
    }}
    .price-table th, .price-table td {{
        border: 1px solid #ddd;
        padding: 10px;
        text-align: left;
    }}
    .price-table th {{
        background-color: #2C3E50;
        color: white;
    }}
    .price-table tr:nth-child(even) {{
        background-color: #f9f9f9;
    }}
</style>
"""))

# === Fiyat Tanımlamaları ===
# Fiyatları güncellemek için fonksiyon
def update_prices():
    global FIYATLAR
    FIYATLAR = {
        # Çelik Profil Fiyatları
        "celik_profil_100x100x3": 45.00,
        "celik_profil_100x50x3": 33.00,
        "celik_profil_40x60x2": 14.00,
        "celik_profil_40x40x2": 11.00,
        "celik_profil_30x30x2": 8.50,
        "celik_profil_HEA160": 155.00,

        # Malzeme Fiyatları
        "celik_agir_m2": 400.00,
        "sandvic_panel_m2": 22.00,
        "plywood_adet": 44.44,
        "aluminyum_pencere_adet": 250.00,
        "wc_pencere_adet": 120.00,
        "kapi_adet": 280.00,
        "mutfak_kurulum_adet": 1500.00,
        "dus_wc_kurulum_adet": 1000.00,
        "baglanti_elemani_m2": 1.50,
        "tasinma": 500.00,
        "yerden_isitma_m2": 50.00,

        # İşçilik Fiyatları
        "kaynak_iscilik_m2": 160.00,
        "panel_montaj_iscilik_m2": 5.00,  # Güncellendi: 5€
        "alcipan_malzeme_m2": 20.00,
        "alcipan_iscilik_m2": 80.00,
        "plywood_doseme_iscilik_m2": 11.11,
        "kapi_pencere_montaj_iscilik_adet": 50.00,
        
        # Tesisat Fiyatları
        "elektrik_tesisat_fiyat": 1200.00,
        "su_tesisat_fiyat": 1300.00,
        
        # Solar Fiyatı (1kW = 1250€)
        "solar_per_kw": 1250.00
    }

# İlk fiyatları yükle
update_prices()

# Sabit Oranlar
FIRE_ORANI = 0.05
KDV_ORANI = 0.19

# === MÜŞTERİ BİLGİLERİ WIDGET'LARI ===
customer_title = widgets.HTML(value="<div class='section-title'>MÜŞTERİ BİLGİLERİ (Opsiyonel)</div>")
customer_name = widgets.Text(description="Adı Soyadı:", value="GENERAL", layout={'width': '45%'})
customer_company = widgets.Text(description="Şirket:", layout={'width': '45%'})
customer_address = widgets.Text(description="Adres:", layout={'width': '45%'})
customer_city = widgets.Text(description="Şehir:", layout={'width': '45%'})
customer_phone = widgets.Text(description="Telefon:", layout={'width': '45%'})
customer_email = widgets.Text(description="E-posta:", layout={'width': '45%'})
customer_note = widgets.HTML(value="<div class='warning'>Not: Müşteri bilgileri zorunlu değildir. Boş bırakılırsa 'GENERAL' olarak işaretlenecektir.</div>")

# === PROJE BİLGİLERİ WIDGET'LARI ===
yapi_tipi = widgets.ToggleButtons(
    options=['Hafif Çelik', 'Ağır Çelik'], 
    description='Yapı Tipi:', 
    button_style='info',
    style={'font_weight': 'bold'}
)
alcipan_secenek = widgets.Checkbox(
    value=True, 
    description="İç Mekan Alçıpan Dahil", 
    indent=False,
    style={'font_weight': 'bold'}
)
en_input = widgets.FloatText(value=10, description="En (m):")
boy_input = widgets.FloatText(value=8, description="Boy (m):")
yukseklik_input = widgets.FloatText(value=2.6, description="Yükseklik (m):")
oda_konfigurasyonu_input = widgets.Text(value="1 oda, 1 banyo, 1 mutfak", description="Oda Konfigürasyonu:")

profil_adet_label = widgets.HTML(
    value="<div class='section-title'>ÇELİK PROFİL ADETLERİ (Hafif Çelik İçin)</div>"
    "<b>(6m parça başına)</b>"
)
profil_100x100_adet = widgets.IntText(value=0, description="100x100x3 Adet:")
profil_100x50_adet = widgets.IntText(value=0, description="100x50x3 Adet:")
profil_40x60_adet = widgets.IntText(value=0, description="40x60x2 Adet:")
profil_40x40_adet = widgets.IntText(value=0, description="40x40x2 Adet:")
profil_30x30_adet = widgets.IntText(value=0, description="30x30x2 Adet:")
profil_HEA160_adet = widgets.IntText(value=0, description="HEA160 Adet:")

# === YENİ EKLENEN ÖZEL SEÇENEKLER ===
isitma_secenek = widgets.Checkbox(
    value=False, 
    description="Yerden Isıtma Dahil (50€/m²)", 
    indent=False,
    style={'font_weight': 'bold'}
)

solar_secenek = widgets.Checkbox(
    value=False, 
    description="Solar Energy System", 
    indent=False,
    style={'font_weight': 'bold'}
)
solar_kapasite = widgets.Dropdown(
    options=[('5 kW', 5), ('7.2 kW', 7.2), ('11 kW', 11)],
    value=5,
    description="Kapasite:",
    disabled=False
)
solar_fiyat = widgets.FloatText(
    value=5 * 1250,  # Güncel fiyat: 1kW = 1250€
    description="Solar Fiyat (€):",
    disabled=False
)

# === KAPI VE PENCERE WIDGET'LARI ===
pencere_input = widgets.IntText(value=4, description="Pencere Adedi:")
pencere_olcu = widgets.Text(value="150x120 cm", description="Ölçü:")
wc_pencere_input = widgets.IntText(value=1, description="WC Pencere Ad.:")
wc_pencere_olcu = widgets.Text(value="60x50 cm", description="Ölçü:")
kapi_input = widgets.IntText(value=2, description="Kapı Adedi:")
kapi_olcu = widgets.Text(value="90x210 cm", description="Ölçü:")

# === EK DONANIMLAR ===
mutfak_input = widgets.Checkbox(value=True, description="Mutfak Dahil")
dus_input = widgets.Checkbox(value=True, description="Duş/WC Dahil")
elektrik_tesisat_input = widgets.Checkbox(value=False, description="Elektrik Tesisatı Dahil")
su_tesisat_input = widgets.Checkbox(value=False, description="Su Tesisatı Dahil")
tasinma_input = widgets.Checkbox(value=False, description="Taşıma Dahil (500€)")

kar_orani_input = widgets.FloatSlider(
    value=0.20, 
    min=0.0, 
    max=0.50, 
    step=0.01, 
    description="Kar Oranı:", 
    readout_format='.0%',
    style={'description_width': 'initial'}
)
kdv_input = widgets.FloatSlider(
    value=KDV_ORANI, 
    min=0.0, 
    max=0.25, 
    step=0.01, 
    description="KDV Oranı:", 
    readout_format='.0%',
    style={'description_width': 'initial'}
)
musteri_notlari = widgets.Textarea(
    value='',
    description='Müşteri Notları:',
    layout={'width': '95%'},
    style={'description_width': 'initial'}
)

rakip_fiyat_input = widgets.FloatText(value=0, description="Rakip Ort. Fiyatı (€):")
rekabet_link_input = widgets.Text(value="N/A", description="İlan/Link:")

# === FİYAT TABLOSU ===
def create_price_table():
    price_html = f"""
    <div class='section-title'>GÜNCEL FİYAT LİSTESİ</div>
    <table class='price-table'>
        <tr>
            <th>Malzeme / Hizmet</th>
            <th>Fiyat (€)</th>
        </tr>
        <tr>
            <td>Çelik Profil (100x100x3)</td>
            <td>{FIYATLAR['celik_profil_100x100x3']} / adet</td>
        </tr>
        <tr>
            <td>Sandviç Panel</td>
            <td>{FIYATLAR['sandvic_panel_m2']} / m²</td>
        </tr>
        <tr>
            <td>Plywood</td>
            <td>{FIYATLAR['plywood_adet']} / adet</td>
        </tr>
        <tr>
            <td>Alüminyum Pencere</td>
            <td>{FIYATLAR['aluminyum_pencere_adet']} / adet</td>
        </tr>
        <tr>
            <td>Panel Montaj İşçiliği</td>
            <td>{FIYATLAR['panel_montaj_iscilik_m2']} / m²</td>
        </tr>
        <tr>
            <td>Alçıpan İşçilik</td>
            <td>{FIYATLAR['alcipan_iscilik_m2']} / m²</td>
        </tr>
        <tr>
            <td>Mutfak Kurulumu</td>
            <td>{FIYATLAR['mutfak_kurulum_adet']} / adet</td>
        </tr>
        <tr>
            <td>Duş/WC Kurulumu</td>
            <td>{FIYATLAR['dus_wc_kurulum_adet']} / adet</td>
        </tr>
        <tr>
            <td>Yerden Isıtma</td>
            <td>{FIYATLAR['yerden_isitma_m2']} / m²</td>
        </tr>
        <tr>
            <td>Solar Energy (1 kW)</td>
            <td>{FIYATLAR['solar_per_kw']} / kW</td>
        </tr>
        <tr>
            <td>Taşıma</td>
            <td>{FIYATLAR['tasinma']} / sefer</td>
        </tr>
    </table>
    """
    return widgets.HTML(value=price_html)

price_table = create_price_table()

# Fiyat güncelleme butonu
def on_fiyat_guncelle_clicked(b):
    global FIYATLAR
    update_prices()
    solar_fiyat.value = solar_kapasite.value * FIYATLAR['solar_per_kw']
    
    # Fiyat tablosunu güncelle
    global price_table
    price_table.close()
    price_table = create_price_table()
    display(price_table)
    
    with output_area:
        clear_output(wait=True)
        display(HTML("<div style='background-color:#dff0d8; color:#3c763d; padding:10px; border-radius:5px;'>"
                     "<b>Fiyatlar başarıyla güncellendi!</b><br>"
                     f"- Panel montaj işçiliği: {FIYATLAR['panel_montaj_iscilik_m2']} €/m²<br>"
                     f"- Solar enerji: {FIYATLAR['solar_per_kw']} €/kW"
                     "</div>"))

fiyat_guncelle_button = widgets.Button(
    description="Fiyatları Güncelle", 
    button_style='warning',
    icon='refresh',
    layout=widgets.Layout(width='250px', height='40px')
)
fiyat_guncelle_button.on_click(on_fiyat_guncelle_clicked)

# === Widget'ları Düzenle ===
ui = widgets.VBox([
    customer_title,
    customer_note,
    widgets.HBox([customer_name, customer_company]),
    widgets.HBox([customer_address, customer_city]),
    widgets.HBox([customer_phone, customer_email]),
    
    # Fiyat tablosunu ekle
    price_table,
    widgets.HBox([fiyat_guncelle_button]),
    
    widgets.HTML("<div class='section-title'>PROJE DETAYLARI</div>"),
    widgets.HBox([yapi_tipi, alcipan_secenek]),
    widgets.HBox([en_input, boy_input, yukseklik_input]),
    oda_konfigurasyonu_input,
    
    widgets.HTML("<div class='section-title'>KAPI & PENCERE DETAYLARI</div>"),
    widgets.HBox([pencere_input, pencere_olcu]),
    widgets.HBox([wc_pencere_input, wc_pencere_olcu]),
    widgets.HBox([kapi_input, kapi_olcu]),
    
    widgets.HTML("<div class='section-title'>ÇELİK PROFİL ADETLERİ</div>"),
    profil_adet_label,
    widgets.HBox([profil_100x100_adet, profil_100x50_adet]),
    widgets.HBox([profil_40x60_adet, profil_40x40_adet]),
    widgets.HBox([profil_30x30_adet, profil_HEA160_adet]),
    
    widgets.HTML("<div class='section-title'>EK DONANIM VE TESİSATLAR</div>"),
    widgets.HBox([mutfak_input, dus_input]),
    widgets.HBox([elektrik_tesisat_input, su_tesisat_input]),
    tasinma_input,
    isitma_secenek,
    widgets.HBox([solar_secenek, solar_kapasite, solar_fiyat]),
    
    widgets.HTML("<div class='section-title'>FİNANSAL AYARLAR</div>"),
    kar_orani_input,
    kdv_input,
    
    widgets.HTML("<div class='section-title'>REKABET ANALİZİ</div>"),
    widgets.HBox([rakip_fiyat_input, rekabet_link_input]),
    
    widgets.HTML("<div class='section-title'>MÜŞTERİ ÖZEL İSTEKLERİ VE NOTLAR</div>"),
    musteri_notlari
])

display(ui)

# === HESAPLAMA FONKSİYONLARI ===
def alan_hesapla(genislik, uzunluk, yukseklik):
    zemin_alani = genislik * uzunluk
    duvar_alani = math.ceil(2 * (genislik + uzunluk) * yukseklik)
    cati_alani = zemin_alani
    return {"zemin": zemin_alani, "duvar": duvar_alani, "cati": cati_alani}

def format_currency(value):
    """Para birimini profesyonel biçimde formatlar: 32.500,00 €"""
    if value >= 1000:
        return f"€{value:,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.')
    return f"€{value:.2f}".replace('.', ',')

def hesapla():
    en, boy, yukseklik = en_input.value, boy_input.value, yukseklik_input.value
    pencere_ad, wc_pencere_ad, kapi_ad = pencere_input.value, wc_pencere_input.value, kapi_input.value
    
    manuel_profil_adetleri = {
        "100x100x3": profil_100x100_adet.value,
        "100x50x3": profil_100x50_adet.value,
        "40x60x2": profil_40x60_adet.value,
        "40x40x2": profil_40x40_adet.value,
        "30x30x2": profil_30x30_adet.value,
        "HEA160": profil_HEA160_adet.value,
    }
    
    varsayilan_parca_boyutu = 6.0
    alanlar = alan_hesapla(en, boy, yukseklik)
    zemin_alani = alanlar["zemin"]
    duvar_alani = alanlar["duvar"]
    cati_alani = alanlar["cati"]
    
    maliyetler = []
    profil_analizi_detaylari = []

    # Çelik İskelet
    if yapi_tipi.value == 'Ağır Çelik':
        toplam_fiyat = zemin_alani * FIYATLAR["celik_agir_m2"]
        maliyetler.append({
            'Kalem': 'Ağır Çelik Konstrüksiyon',
            'Miktar': f'{zemin_alani:.2f} m²',
            'Birim Fiyat (€)': format_currency(FIYATLAR["celik_agir_m2"]),
            'Toplam (€)': format_currency(toplam_fiyat)
        })
        
        toplam_fiyat = zemin_alani * FIYATLAR["kaynak_iscilik_m2"]
        maliyetler.append({
            'Kalem': 'Çelik Kaynak İşçiliği',
            'Miktar': f'{zemin_alani:.2f} m²',
            'Birim Fiyat (€)': format_currency(FIYATLAR["kaynak_iscilik_m2"]),
            'Toplam (€)': format_currency(toplam_fiyat)
        })
    else:
        for profil_tipi, adet_parca in manuel_profil_adetleri.items():
            if adet_parca > 0:
                profil_anahtar_temiz = profil_tipi
                birim_fiyat_6m_parca = FIYATLAR.get(f"celik_profil_{profil_anahtar_temiz}")
                if birim_fiyat_6m_parca is None:
                    continue
                toplam_fiyat = adet_parca * birim_fiyat_6m_parca
                rapor_miktari_metre = adet_parca * varsayilan_parca_boyutu
                profil_analizi_detaylari.append({
                    'Profil Tipi': profil_tipi,
                    'Adet': adet_parca,
                    'Birim Fiyat (€)': birim_fiyat_6m_parca,
                    'Toplam (€)': toplam_fiyat
                })
                maliyetler.append({
                    'Kalem': f"Çelik Profil ({profil_tipi})",
                    'Miktar': f"{adet_parca} adet ({rapor_miktari_metre:.1f}m)",
                    'Birim Fiyat (€)': format_currency(birim_fiyat_6m_parca),
                    'Toplam (€)': format_currency(toplam_fiyat)
                })
        
        toplam_fiyat = zemin_alani * FIYATLAR["kaynak_iscilik_m2"]
        maliyetler.append({
            'Kalem': 'Çelik Kaynak İşçiliği',
            'Miktar': f'{zemin_alani:.2f} m²',
            'Birim Fiyat (€)': format_currency(FIYATLAR["kaynak_iscilik_m2"]),
            'Toplam (€)': format_currency(toplam_fiyat)
        })

    # Kaplama ve Yalıtım
    toplam_fiyat = cati_alani * FIYATLAR["sandvic_panel_m2"]
    maliyetler.append({
        'Kalem': 'Çatı (Sandviç Panel)',
        'Miktar': f'{cati_alani:.2f} m²',
        'Birim Fiyat (€)': format_currency(FIYATLAR["sandvic_panel_m2"]),
        'Toplam (€)': format_currency(toplam_fiyat)
    })
    
    toplam_fiyat = duvar_alani * FIYATLAR["sandvic_panel_m2"]
    maliyetler.append({
        'Kalem': 'Cephe (Sandviç Panel)',
        'Miktar': f'{duvar_alani:.2f} m²',
        'Birim Fiyat (€)': format_currency(FIYATLAR["sandvic_panel_m2"]),
        'Toplam (€)': format_currency(toplam_fiyat)
    })
    
    toplam_fiyat = (duvar_alani + cati_alani) * FIYATLAR["panel_montaj_iscilik_m2"]
    maliyetler.append({
        'Kalem': "Panel Montaj İşçiliği",
        'Miktar': f"{(duvar_alani + cati_alani):.2f} m²",
        'Birim Fiyat (€)': format_currency(FIYATLAR["panel_montaj_iscilik_m2"]),
        'Toplam (€)': format_currency(toplam_fiyat)
    })

    # İç Mekan ve Zemin
    if alcipan_secenek.value:
        alcipan_alani = duvar_alani + cati_alani
        toplam_fiyat = alcipan_alani * FIYATLAR["alcipan_malzeme_m2"]
        maliyetler.append({
            'Kalem': 'Alçıpan Malzeme', 
            'Miktar': f'{alcipan_alani:.2f} m²',
            'Birim Fiyat (€)': format_currency(FIYATLAR["alcipan_malzeme_m2"]),
            'Toplam (€)': format_currency(toplam_fiyat)
        })
        
        toplam_fiyat = alcipan_alani * FIYATLAR["alcipan_iscilik_m2"]
        maliyetler.append({
            'Kalem': 'Alçıpan İşçilik', 
            'Miktar': f'{alcipan_alani:.2f} m²',
            'Birim Fiyat (€)': format_currency(FIYATLAR["alcipan_iscilik_m2"]),
            'Toplam (€)': format_currency(toplam_fiyat)
        })

    plywood_adet_gerekli = math.ceil(zemin_alani / (1.22 * 2.44))
    toplam_fiyat = plywood_adet_gerekli * FIYATLAR["plywood_adet"]
    maliyetler.append({
        'Kalem': 'Zemin (Plywood Malzeme)',
        'Miktar': plywood_adet_gerekli,
        'Birim Fiyat (€)': format_currency(FIYATLAR["plywood_adet"]),
        'Toplam (€)': format_currency(toplam_fiyat)
    })
    
    toplam_fiyat = zemin_alani * FIYATLAR["plywood_doseme_iscilik_m2"]
    maliyetler.append({
        'Kalem': 'Zemin (Plywood İşçilik)',
        'Miktar': f'{zemin_alani:.2f} m²',
        'Birim Fiyat (€)': format_currency(FIYATLAR["plywood_doseme_iscilik_m2"]),
        'Toplam (€)': format_currency(toplam_fiyat)
    })

    # Yerden Isıtma (Yeni eklenen)
    if isitma_secenek.value:
        toplam_fiyat = zemin_alani * FIYATLAR["yerden_isitma_m2"]
        maliyetler.append({
            'Kalem': 'Yerden Isıtma Sistemi',
            'Miktar': f'{zemin_alani:.2f} m²',
            'Birim Fiyat (€)': format_currency(FIYATLAR["yerden_isitma_m2"]),
            'Toplam (€)': format_currency(toplam_fiyat)
        })

    # Solar Energy System (Yeni eklenen)
    if solar_secenek.value:
        # Solar fiyatını güncel kW fiyatı üzerinden hesapla
        solar_fiyat_deger = solar_kapasite.value * FIYATLAR['solar_per_kw']
        maliyetler.append({
            'Kalem': f'Solar Energy System ({solar_kapasite.value} kW)',
            'Miktar': 1,
            'Birim Fiyat (€)': format_currency(solar_fiyat_deger),
            'Toplam (€)': format_currency(solar_fiyat_deger)
        })

    # Kapı ve Pencereler
    if pencere_ad > 0:
        toplam_fiyat = pencere_ad * FIYATLAR["aluminyum_pencere_adet"]
        maliyetler.append({
            'Kalem': f'Pencere ({pencere_olcu.value})',
            'Miktar': pencere_ad,
            'Birim Fiyat (€)': format_currency(FIYATLAR["aluminyum_pencere_adet"]),
            'Toplam (€)': format_currency(toplam_fiyat)
        })
    if wc_pencere_ad > 0:
        toplam_fiyat = wc_pencere_ad * FIYATLAR["wc_pencere_adet"]
        maliyetler.append({
            'Kalem': f'WC Pencere ({wc_pencere_olcu.value})',
            'Miktar': wc_pencere_ad,
            'Birim Fiyat (€)': format_currency(FIYATLAR["wc_pencere_adet"]),
            'Toplam (€)': format_currency(toplam_fiyat)
        })
    if kapi_ad > 0:
        toplam_fiyat = kapi_ad * FIYATLAR["kapi_adet"]
        maliyetler.append({
            'Kalem': f'Kapı ({kapi_olcu.value})',
            'Miktar': kapi_ad,
            'Birim Fiyat (€)': format_currency(FIYATLAR["kapi_adet"]),
            'Toplam (€)': format_currency(toplam_fiyat)
        })
    
    toplam_kapi_pencere_adet = pencere_ad + wc_pencere_ad + kapi_ad
    if toplam_kapi_pencere_adet > 0:
        toplam_fiyat = toplam_kapi_pencere_adet * FIYATLAR["kapi_pencere_montaj_iscilik_adet"]
        maliyetler.append({
            'Kalem': 'Kapı/Pencere Montaj İşçiliği',
            'Miktar': toplam_kapi_pencere_adet,
            'Birim Fiyat (€)': format_currency(FIYATLAR["kapi_pencere_montaj_iscilik_adet"]),
            'Toplam (€)': format_currency(toplam_fiyat)
        })
    
    # Diğer Kalemler
    toplam_fiyat = zemin_alani * FIYATLAR["baglanti_elemani_m2"]
    maliyetler.append({
        'Kalem': "Bağlantı Elemanları",
        'Miktar': f"{zemin_alani:.2f} m²",
        'Birim Fiyat (€)': format_currency(FIYATLAR["baglanti_elemani_m2"]),
        'Toplam (€)': format_currency(toplam_fiyat)
    })

    if mutfak_input.value:
        maliyetler.append({
            'Kalem': 'Mutfak Kurulumu',
            'Miktar': 1,
            'Birim Fiyat (€)': format_currency(FIYATLAR["mutfak_kurulum_adet"]),
            'Toplam (€)': format_currency(FIYATLAR["mutfak_kurulum_adet"])
        })
    if dus_input.value:
        maliyetler.append({
            'Kalem': 'Duş/WC Kurulumu',
            'Miktar': 1,
            'Birim Fiyat (€)': format_currency(FIYATLAR["dus_wc_kurulum_adet"]),
            'Toplam (€)': format_currency(FIYATLAR["dus_wc_kurulum_adet"])
        })
    if elektrik_tesisat_input.value: 
        maliyetler.append({
            'Kalem': 'Elektrik Tesisatı',
            'Miktar': 1,
            'Birim Fiyat (€)': format_currency(FIYATLAR["elektrik_tesisat_fiyat"]),
            'Toplam (€)': format_currency(FIYATLAR["elektrik_tesisat_fiyat"])
        })
    if su_tesisat_input.value: 
        maliyetler.append({
            'Kalem': 'Su Tesisatı',
            'Miktar': 1,
            'Birim Fiyat (€)': format_currency(FIYATLAR["su_tesisat_fiyat"]),
            'Toplam (€)': format_currency(FIYATLAR["su_tesisat_fiyat"])
        })
    if tasinma_input.value:
        maliyetler.append({
            'Kalem': 'Taşıma (Nakliye)',
            'Miktar': 1,
            'Birim Fiyat (€)': format_currency(FIYATLAR["tasinma"]),
            'Toplam (€)': format_currency(FIYATLAR["tasinma"])
        })

    # Finansal Hesaplamalar
    ara_toplam = sum([float(item['Toplam (€)'].replace('€', '').replace('.', '').replace(',', '.')) 
                     for item in maliyetler if 'Toplam (€)' in item])
    
    fire_maliyeti = ara_toplam * FIRE_ORANI
    toplam_maliyet = ara_toplam + fire_maliyeti
    kar = toplam_maliyet * kar_orani_input.value
    kdv_matrahi = toplam_maliyet + kar
    kdv = kdv_matrahi * kdv_input.value
    satis_fiyati = kdv_matrahi + kdv
    
    finansal_ozet_data = [
        ["Ara Toplam", ara_toplam],
        [f"Fire Payı (%{FIRE_ORANI*100:.0f})", fire_maliyeti],
        ["Toplam Maliyet (Fire Dahil)", toplam_maliyet],
        [f"Kar (%{kar_orani_input.value*100:.0f})", kar],
        [f"KDV (%{kdv_input.value*100:.0f})", kdv],
        ["Satış Fiyatı (KDV Dahil)", satis_fiyati]
    ]
    
    # Formatlı finansal özet oluştur
    formatted_finansal_ozet = []
    for kalem, tutar in finansal_ozet_data:
        formatted_finansal_ozet.append({
            'Kalem': kalem,
            'Tutar (€)': format_currency(tutar)
        })
    
    # Müşteri bilgilerini işle
    customer_name_value = customer_name.value.strip() or "GENERAL"
    
    return {
        'maliyet_dokum': pd.DataFrame(maliyetler),
        'finansal_ozet': pd.DataFrame(formatted_finansal_ozet),
        'profil_analizi': pd.DataFrame(profil_analizi_detaylari),
        'notlar': musteri_notlari.value,
        'satis_fiyati': satis_fiyati,
        'alan': zemin_alani,
        'en': en,
        'boy': boy,
        'yukseklik': yukseklik,
        'customer_info': {
            'name': customer_name_value,
            'company': customer_company.value or "",
            'address': customer_address.value or "",
            'city': customer_city.value or "",
            'phone': customer_phone.value or "",
            'email': customer_email.value or ""
        },
        'proje_bilgileri': {
            'en': en,
            'boy': boy,
            'yukseklik': yukseklik,
            'alan': zemin_alani,
            'yapi_tipi': yapi_tipi.value,
            'alcipan': alcipan_secenek.value,
            'pencere_adet': pencere_input.value,
            'pencere_olcu': pencere_olcu.value,
            'wc_pencere_adet': wc_pencere_input.value,
            'wc_pencere_olcu': wc_pencere_olcu.value,
            'kapi_adet': kapi_input.value,
            'kapi_olcu': kapi_olcu.value,
            'mutfak': mutfak_input.value,
            'dus': dus_input.value,
            'elektrik': elektrik_tesisat_input.value,
            'su': su_tesisat_input.value,
            'tasinma': tasinma_input.value,
            'isitma': isitma_secenek.value,
            'solar': solar_secenek.value,
            'solar_kw': solar_kapasite.value,
            'solar_fiyat': solar_kapasite.value * FIYATLAR['solar_per_kw'],
            'kdv_orani': kdv_input.value,
            'oda_konfigurasyonu': oda_konfigurasyonu_input.value
        }
    }

# === PDF OLUŞTURMA FONKSİYONLARI ===
def create_pdf_download_link(pdf_bytes, filename):
    """PDF dosyası için indirme linki oluşturur"""
    b64 = base64.b64encode(pdf_bytes).decode()
    return f'<a class="pdf-button" href="data:application/pdf;base64,{b64}" download="{filename}">{filename} İndir</a>'

def get_company_logo(width=180):
    """Premium Plus logosunu alır ve base64 formatında döndürür"""
    try:
        response = requests.get(LOGO_URL)
        img = PILImage.open(io.BytesIO(response.content))
        
        # Logoyu yeniden boyutlandır
        w_percent = (width / float(img.size[0]))
        h_size = int((float(img.size[1]) * float(w_percent)))
        img = img.resize((width, h_size), PILImage.LANCZOS)
        
        # Base64 formatına dönüştür
        buffered = io.BytesIO()
        img.save(buffered, format="PNG")
        return base64.b64encode(buffered.getvalue()).decode()
    except:
        # Logo yüklenemezse boş döndür
        return None

def draw_header(canvas, doc, logo_data):
    """Sayfa başlığı çizer (logo ve şirket bilgileri)"""
    # Logo
    if logo_data:
        logo = Image(io.BytesIO(base64.b64decode(logo_data)))
        logo.drawHeight = 40 * mm
        logo.drawWidth = 150 * mm
        logo.drawOn(canvas, doc.width + doc.leftMargin - 150*mm - 20, doc.height + doc.topMargin - 10*mm)

def draw_footer(canvas, doc):
    """Sayfa alt bilgisi çizer - Linktree linki eklendi"""
    # Şirket iletişim bilgileri
    footer_text = f"{COMPANY_INFO['address']} | {COMPANY_INFO['email']} | {COMPANY_INFO['phone']} | {COMPANY_INFO['website']} | Linktree: {COMPANY_INFO['linktree']}"
    canvas.setFont(f"{MAIN_FONT}-Bold", 9)
    canvas.drawCentredString(doc.width/2 + doc.leftMargin, 15*mm, footer_text)
    
    # Sayfa numarası
    page_num = canvas.getPageNumber()
    canvas.setFont(MAIN_FONT, 9)
    canvas.drawRightString(doc.width + doc.leftMargin, 10*mm, f"Page {page_num}")

def musteri_pdf_olustur(satis_fiyati, proje_bilgileri, notlar, customer_info, logo_data):
    """Müşteri için teklif PDF'i oluşturur (İngilizce ve Rumca)"""
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(
        buffer, 
        pagesize=A4,
        rightMargin=15*mm,
        leftMargin=15*mm,
        topMargin=40*mm,
        bottomMargin=25*mm
    )
    
    styles = getSampleStyleSheet()
    
    # Benzersiz stil isimleri kullan
    custom_styles = {}
    
    # İki dilli stil
    custom_styles['Bilingual'] = ParagraphStyle(
        name='Bilingual',
        parent=styles['Normal'],
        fontSize=10,
        leading=14,
        fontName=MAIN_FONT
    )
    
    # Kalın iki dilli stil
    custom_styles['BilingualBold'] = ParagraphStyle(
        name='BilingualBold',
        parent=styles['Normal'],
        fontSize=10,
        leading=14,
        fontName=f"{MAIN_FONT}-Bold"
    )
    
    # Başlık stili
    custom_styles['Title'] = ParagraphStyle(
        name='Title',
        parent=styles['Heading1'],
        fontSize=16,
        alignment=TA_CENTER,
        spaceAfter=12,
        fontName=f"{MAIN_FONT}-Bold"
    )
    
    # Alt başlık stili
    custom_styles['Heading'] = ParagraphStyle(
        name='Heading',
        parent=styles['Heading2'],
        fontSize=12,
        spaceAfter=6,
        fontName=f"{MAIN_FONT}-Bold"
    )
    
    # Fiyat stili
    custom_styles['Price'] = ParagraphStyle(
        name='Price',
        parent=styles['Heading1'],
        fontSize=18,
        alignment=TA_CENTER,
        spaceAfter=6,
        fontName=f"{MAIN_FONT}-Bold"
    )
    
    elements = []
    
    # Müşteri ve Şirket Bilgileri (Yan Yana)
    customer_company_data = []
    
    # Müşteri Bilgileri
    customer_data = [
        [Paragraph("<b>MÜŞTERİ BİLGİLERİ</b>", custom_styles['BilingualBold'])],
        [Paragraph(f"Adı Soyadı: {customer_info['name']}", custom_styles['Bilingual'])],
        [Paragraph(f"Şirket: {customer_info['company']}", custom_styles['Bilingual'])],
        [Paragraph(f"Adres: {customer_info['address']}", custom_styles['Bilingual'])],
        [Paragraph(f"Şehir: {customer_info['city']}", custom_styles['Bilingual'])],
        [Paragraph(f"Telefon: {customer_info['phone']}", custom_styles['Bilingual'])],
        [Paragraph(f"E-posta: {customer_info['email']}", custom_styles['Bilingual'])]
    ]
    
    # Şirket Bilgileri
    company_data = [
        [Paragraph("<b>ŞİRKET BİLGİLERİ</b>", custom_styles['BilingualBold'])],
        [Paragraph(f"Şirket: {COMPANY_INFO['name']}", custom_styles['Bilingual'])],
        [Paragraph(f"Adres: {COMPANY_INFO['address']}", custom_styles['Bilingual'])],
        [Paragraph(f"Telefon: {COMPANY_INFO['phone']}", custom_styles['Bilingual'])],
        [Paragraph(f"E-posta: {COMPANY_INFO['email']}", custom_styles['Bilingual'])],
        [Paragraph(f"Website: {COMPANY_INFO['website']}", custom_styles['Bilingual'])]
    ]
    
    customer_company_data.append([customer_data, company_data])
    
    # Tablo oluştur
    col_width = doc.width / 2 - 6*mm
    customer_company_table = Table(customer_company_data, colWidths=[col_width, col_width])
    customer_company_table.setStyle(TableStyle([
        ('VALIGN', (0,0), (-1,-1), 'TOP'),
        ('ALIGN', (0,0), (-1,-1), 'LEFT'),
        ('FONTNAME', (0,0), (-1,-1), MAIN_FONT),
        ('FONTSIZE', (0,0), (-1,-1), 10),
        ('BOTTOMPADDING', (0,0), (-1,-1), 4),
        ('LEFTPADDING', (0,0), (-1,-1), 0),
        ('RIGHTPADDING', (0,0), (-1,-1), 0),
        ('BOX', (0,0), (-1,-1), 1, colors.lightgrey),
        ('BACKGROUND', (0,0), (0,0), colors.HexColor('#f2f2f2')),
        ('BACKGROUND', (1,0), (1,0), colors.HexColor('#f2f2f2')),
    ]))
    elements.append(customer_company_table)
    elements.append(Spacer(1, 12))
    
    # Proje Başlığı
    elements.append(Paragraph("PREFABRICATED HOUSE PROPOSAL", custom_styles['Title']))
    elements.append(Paragraph("ΠΡΟΤΑΣΗ ΠΡΟΠΤΥΧΑΚΙΣΜΕΝΟΥ ΣΠΙΤΙΟΥ", custom_styles['Title']))
    elements.append(Paragraph(f"Date: {datetime.now().strftime('%d/%m/%Y')} | Ημερομηνία: {datetime.now().strftime('%d/%m/%Y')}", custom_styles['Bilingual']))
    elements.append(Spacer(1, 12))
    
    # Proje Bilgileri
    elements.append(Paragraph("PROJECT DETAILS | ΣΤΟΙΧΕΙΑ ΠΡΟΤΎΠΟΥ", custom_styles['Heading']))
    
    project_data = [
        [f"Dimensions: {proje_bilgileri['en']}m x {proje_bilgileri['boy']}m x {proje_bilgileri['yukseklik']}m", 
         f"Διαστάσεις: {proje_bilgileri['en']}m x {proje_bilgileri['boy']}m x {proje_bilgileri['yukseklik']}m"],
        [f"Total Area: {proje_bilgileri['alan']:.2f} m²", 
         f"Συνολική Έκταση: {proje_bilgileri['alan']:.2f} m²"],
        [f"Room Configuration: {proje_bilgileri['oda_konfigurasyonu']}", 
         f"Διαμόρφωση Δωματίων: {proje_bilgileri['oda_konfigurasyonu']}"],
        [f"Estimated Delivery Time: {int(proje_bilgileri['alan'] / 5) + 10} days", 
         f"Εκτιμώμενος Χρόνος Παράδοσης: {int(proje_bilgileri['alan'] / 5) + 10} ημέρες"]
    ]
    
    for eng, gr in project_data:
        elements.append(Paragraph(eng, custom_styles['Bilingual']))
        elements.append(Paragraph(gr, custom_styles['Bilingual']))
        elements.append(Spacer(1, 4))
    
    elements.append(Spacer(1, 8))
    
    # Teknik Özellikler
    elements.append(Paragraph("TECHNICAL SPECIFICATIONS | ΤΕΧΝΙΚΑ ΧΑΡΑΚΤΗΡΙΣΤΙΚΑ", custom_styles['Heading']))
    
    specs_data = [
        [f"Structure Type: {proje_bilgileri['yapi_tipi']}", 
         f"Τύπος Κατασκευής: {proje_bilgileri['yapi_tipi']}"],
        [f"Interior Plasterboard: {'Included' if proje_bilgileri['alcipan'] else 'Not included'}", 
         f"Εσωτερικό Τσιμεντόβαμβακα: {'Συμπεριλαμβάνεται' if proje_bilgileri['alcipan'] else 'Δεν συμπεριλαμβάνεται'}"],
        [f"Windows: {proje_bilgileri['pencere_adet']} units ({proje_bilgileri['pencere_olcu']})", 
         f"Παράθυρα: {proje_bilgileri['pencere_adet']} τεμάχια ({proje_bilgileri['pencere_olcu']})"],
        [f"WC Windows: {proje_bilgileri['wc_pencere_adet']} units ({proje_bilgileri['wc_pencere_olcu']})", 
         f"Παράθυρα WC: {proje_bilgileri['wc_pencere_adet']} τεμάχια ({proje_bilgileri['wc_pencere_olcu']})"],
        [f"Doors: {proje_bilgileri['kapi_adet']} units ({proje_bilgileri['kapi_olcu']})", 
         f"Πόρτες: {proje_bilgileri['kapi_adet']} τεμάχια ({proje_bilgileri['kapi_olcu']})"],
        [f"Kitchen: {'Included' if proje_bilgileri['mutfak'] else 'Not included'}", 
         f"Κουζίνα: {'Συμπεριλαμβάνεται' if proje_bilgileri['mutfak'] else 'Δεν συμπεριλαμβάνεται'}"],
        [f"Shower/WC: {'Included' if proje_bilgileri['dus'] else 'Not included'}", 
         f"Ντους/WC: {'Συμπεριλαμβάνεται' if proje_bilgileri['dus'] else 'Δεν συμπεριλαμβάνεται'}"],
        [f"Electrical Installation: {'Included' if proje_bilgileri['elektrik'] else 'Not included'}", 
         f"Ηλεκτρολογικές Εγκαταστάσεις: {'Συμπεριλαμβάνεται' if proje_bilgileri['elektrik'] else 'Δεν συμπεριλαμβάνεται'}"],
        [f"Plumbing: {'Included' if proje_bilgileri['su'] else 'Not included'}", 
         f"Υδραυλικές Εγκαταστάσεις: {'Συμπεριλαμβάνεται' if proje_bilgileri['su'] else 'Δεν συμπεριλαμβάνεται'}"],
        [f"Floor Heating: {'Included' if proje_bilgileri['isitma'] else 'Not included'}", 
         f"Υπόγεια Θέρμανση: {'Συμπεριλαμβάνεται' if proje_bilgileri['isitma'] else 'Δεν συμπεριλαμβάνεται'}"],
        [f"Solar Energy System: {'Included' if proje_bilgileri['solar'] else 'Not included'} ({proje_bilgileri['solar_kw']} kW)", 
         f"Ηλιακό Σύστημα: {'Συμπεριλαμβάνεται' if proje_bilgileri['solar'] else 'Δεν συμπεριλαμβάνεται'} ({proje_bilgileri['solar_kw']} kW)"],
        [f"Transportation: {'Included' if proje_bilgileri['tasinma'] else 'Not included'}", 
         f"Μεταφορά: {'Συμπεριλαμβάνεται' if proje_bilgileri['tasinma'] else 'Δεν συμπεριλαμβάνεται'}"]
    ]
    
    for eng, gr in specs_data:
        elements.append(Paragraph(eng, custom_styles['Bilingual']))
        elements.append(Paragraph(gr, custom_styles['Bilingual']))
        elements.append(Spacer(1, 4))
    
    elements.append(Spacer(1, 15))
    
    # Toplam Satış Fiyatı
    elements.append(Paragraph("TOTAL SALES PRICE (VAT INCLUDED)", custom_styles['Heading']))
    elements.append(Paragraph("ΣΥΝΟΛΙΚΗ ΤΙΜΗ ΠΩΛΗΣΗΣ (ΜΕ ΦΠΑ)", custom_styles['Heading']))
    elements.append(Paragraph(format_currency(satis_fiyati), custom_styles['Price']))
    elements.append(Paragraph(f"(VAT %{proje_bilgileri['kdv_orani']*100:.0f} included) | (ΦΠΑ %{proje_bilgileri['kdv_orani']*100:.0f} συμπεριλαμβάνεται)", custom_styles['Bilingual']))
    elements.append(Spacer(1, 15))
    
    # Özel Notlar
    if notlar:
        elements.append(Paragraph("SPECIAL NOTES | ΕΙΔΙΚΕΣ ΣΗΜΕΙΩΣΕΙΣ", custom_styles['Heading']))
        elements.append(Paragraph(notlar, custom_styles['Bilingual']))
    
    # PDF oluşturma fonksiyonu
    def on_first_page(canvas, doc):
        draw_header(canvas, doc, logo_data)
        draw_footer(canvas, doc)
        
    def on_later_pages(canvas, doc):
        draw_footer(canvas, doc)
    
    doc.build(elements, onFirstPage=on_first_page, onLaterPages=on_later_pages)
    buffer.seek(0)
    return buffer.getvalue()

def maliyet_raporu_pdf_olustur(proje_bilgileri, maliyet_dokum_df, finansal_ozet_df, profil_analizi_df, customer_info, logo_data):
    """Maliyet raporu PDF'i oluşturur"""
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(
        buffer, 
        pagesize=A4,
        rightMargin=15*mm,
        leftMargin=15*mm,
        topMargin=40*mm,
        bottomMargin=25*mm
    )
    
    styles = getSampleStyleSheet()
    
    # Benzersiz stil isimleri kullan
    custom_styles = {}
    
    # Maliyet raporu için özel stiller
    custom_styles['CostTitle'] = ParagraphStyle(
        name='CostTitle',
        parent=styles['Heading1'],
        fontSize=16,
        alignment=TA_CENTER,
        spaceAfter=12,
        fontName=f"{MAIN_FONT}-Bold"
    )
    
    custom_styles['CostHeading'] = ParagraphStyle(
        name='CostHeading',
        parent=styles['Heading2'],
        fontSize=12,
        spaceAfter=6,
        fontName=f"{MAIN_FONT}-Bold"
    )
    
    elements = []
    
    # Müşteri ve Şirket Bilgileri (Yan Yana)
    customer_company_data = []
    
    # Müşteri Bilgileri
    customer_data = [
        [Paragraph("<b>MÜŞTERİ BİLGİLERİ</b>", custom_styles['CostHeading'])],
        [Paragraph(f"Adı Soyadı: {customer_info['name']}", styles['Normal'])],
        [Paragraph(f"Şirket: {customer_info['company']}", styles['Normal'])],
        [Paragraph(f"Adres: {customer_info['address']}", styles['Normal'])],
        [Paragraph(f"Şehir: {customer_info['city']}", styles['Normal'])],
        [Paragraph(f"Telefon: {customer_info['phone']}", styles['Normal'])],
        [Paragraph(f"E-posta: {customer_info['email']}", styles['Normal'])]
    ]
    
    # Şirket Bilgileri
    company_data = [
        [Paragraph("<b>ŞİRKET BİLGİLERİ</b>", custom_styles['CostHeading'])],
        [Paragraph(f"Şirket: {COMPANY_INFO['name']}", styles['Normal'])],
        [Paragraph(f"Adres: {COMPANY_INFO['address']}", styles['Normal'])],
        [Paragraph(f"Telefon: {COMPANY_INFO['phone']}", styles['Normal'])],
        [Paragraph(f"E-posta: {COMPANY_INFO['email']}", styles['Normal'])],
        [Paragraph(f"Website: {COMPANY_INFO['website']}", styles['Normal'])]
    ]
    
    customer_company_data.append([customer_data, company_data])
    
    # Tablo oluştur
    col_width = doc.width / 2 - 6*mm
    customer_company_table = Table(customer_company_data, colWidths=[col_width, col_width])
    customer_company_table.setStyle(TableStyle([
        ('VALIGN', (0,0), (-1,-1), 'TOP'),
        ('ALIGN', (0,0), (-1,-1), 'LEFT'),
        ('FONTNAME', (0,0), (-1,-1), MAIN_FONT),
        ('FONTSIZE', (0,0), (-1,-1), 10),
        ('BOTTOMPADDING', (0,0), (-1,-1), 4),
        ('LEFTPADDING', (0,0), (-1,-1), 0),
        ('RIGHTPADDING', (0,0), (-1,-1), 0),
        ('BOX', (0,0), (-1,-1), 1, colors.lightgrey),
        ('BACKGROUND', (0,0), (0,0), colors.HexColor('#f2f2f2')),
        ('BACKGROUND', (1,0), (1,0), colors.HexColor('#f2f2f2')),
    ]))
    elements.append(customer_company_table)
    elements.append(Spacer(1, 12))
    
    # Başlık
    elements.append(Paragraph("MALİYET VE MALZEME RAPORU", custom_styles['CostTitle']))
    elements.append(Paragraph(f"Oluşturulma Tarihi: {datetime.now().strftime('%d/%m/%Y %H:%M')}", styles['Normal']))
    elements.append(Spacer(1, 12))

    # Proje Bilgileri
    elements.append(Paragraph("PROJE BİLGİLERİ", custom_styles['CostHeading']))
    data = [
        ["Boyutlar:", f"{proje_bilgileri['en']}m x {proje_bilgileri['boy']}m x {proje_bilgileri['yukseklik']}m"],
        ["Toplam Alan:", f"{proje_bilgileri['alan']:.2f} m²"],
        ["Yapı Tipi:", proje_bilgileri['yapi_tipi']],
        ["Oda Konfigürasyonu:", proje_bilgileri['oda_konfigurasyonu']]
    ]
    table = Table(data, colWidths=[4*cm, 12*cm])
    table.setStyle(TableStyle([
        ('FONTNAME', (0,0), (-1,-1), MAIN_FONT),
        ('FONTSIZE', (0,0), (-1,-1), 10),
        ('VALIGN', (0,0), (-1,-1), 'MIDDLE'),
        ('BACKGROUND', (0,0), (0,-1), colors.HexColor('#f2f2f2')),
    ]))
    elements.append(table)
    elements.append(Spacer(1, 12))
    
    # Çelik Profil Analizi Tablosu (Hafif Çelik için)
    if not profil_analizi_df.empty:
        elements.append(Paragraph("ÇELİK PROFİL ANALİZİ", custom_styles['CostHeading']))
        data = [profil_analizi_df.columns.tolist()]
        for row in profil_analizi_df.values.tolist():
            formatted_row = list(row)
            formatted_row[2] = format_currency(row[2])
            formatted_row[3] = format_currency(row[3])
            data.append(formatted_row)
        table = Table(data, repeatRows=1, colWidths=[5*cm, 3*cm, 4*cm, 4*cm])
        table.setStyle(TableStyle([
            ('BACKGROUND', (0,0), (-1,0), colors.HexColor('#2C3E50')),
            ('TEXTCOLOR', (0,0), (-1,0), colors.white),
            ('ALIGN', (0,0), (-1,-1), 'LEFT'),
            ('FONTNAME', (0,0), (-1,0), f"{MAIN_FONT}-Bold"),
            ('FONTNAME', (0,1), (-1,-1), MAIN_FONT),
            ('BOTTOMPADDING', (0,0), (-1,0), 6),
            ('BACKGROUND', (0,1), (-1,-1), colors.white),
            ('GRID', (0,0), (-1,-1), 1, colors.HexColor('#ddd')),
            ('FONTSIZE', (0,0), (-1,-1), 9),
        ]))
        elements.append(table)
        elements.append(Spacer(1, 12))
    
    # Maliyet Dökümü
    elements.append(Paragraph("MALİYET DÖKÜMÜ", custom_styles['CostHeading']))
    data = [maliyet_dokum_df.columns.tolist()]
    for _, row in maliyet_dokum_df.iterrows():
        formatted_row = [
            row['Kalem'],
            row['Miktar'],
            row['Birim Fiyat (€)'],
            row['Toplam (€)']
        ]
        data.append(formatted_row)
    
    table = Table(data, repeatRows=1, colWidths=[8*cm, 3*cm, 3*cm, 3*cm])
    table.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,0), colors.HexColor('#2C3E50')),
        ('TEXTCOLOR', (0,0), (-1,0), colors.white),
        ('ALIGN', (0,0), (-1,-1), 'LEFT'),
        ('FONTNAME', (0,0), (-1,0), f"{MAIN_FONT}-Bold"),
        ('FONTNAME', (0,1), (-1,-1), MAIN_FONT),
        ('BOTTOMPADDING', (0,0), (-1,0), 6),
        ('BACKGROUND', (0,1), (-1,-1), colors.white),
        ('GRID', (0,0), (-1,-1), 1, colors.HexColor('#ddd')),
        ('FONTSIZE', (0,0), (-1,-1), 9),
    ]))
    elements.append(table)
    elements.append(Spacer(1, 12))
    
    # Finansal Özet
    elements.append(Paragraph("FİNANSAL ÖZET", custom_styles['CostHeading']))
    data = [finansal_ozet_df.columns.tolist()]
    for _, row in finansal_ozet_df.iterrows():
        formatted_row = [row['Kalem'], row['Tutar (€)']]
        data.append(formatted_row)
    table = Table(data, repeatRows=1, colWidths=[12*cm, 4*cm])
    table.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,0), colors.HexColor('#2C3E50')),
        ('TEXTCOLOR', (0,0), (-1,0), colors.white),
        ('ALIGN', (0,0), (-1,-1), 'LEFT'),
        ('FONTNAME', (0,0), (-1,0), f"{MAIN_FONT}-Bold"),
        ('FONTNAME', (0,1), (-1,-1), MAIN_FONT),
        ('FONTNAME', (0,-1), (-1,-1), f"{MAIN_FONT}-Bold"),
        ('BOTTOMPADDING', (0,0), (-1,0), 6),
        ('BACKGROUND', (0,1), (-1,-1), colors.white),
        ('GRID', (0,0), (-1,-1), 1, colors.HexColor('#ddd')),
        ('FONTSIZE', (0,0), (-1,-1), 10),
        ('LINEBELOW', (0,-2), (-1,-2), 1, colors.black),
    ]))
    elements.append(table)
    
    # PDF oluşturma fonksiyonu
    def on_first_page(canvas, doc):
        draw_header(canvas, doc, logo_data)
        draw_footer(canvas, doc)
        
    def on_later_pages(canvas, doc):
        draw_footer(canvas, doc)
    
    doc.build(elements, onFirstPage=on_first_page, onLaterPages=on_later_pages)
    buffer.seek(0)
    return buffer.getvalue()

# === ANA İŞLEM BUTONU ===
hesapla_button = widgets.Button(
    description="Hesapla ve PDF'leri Oluştur", 
    button_style='success', 
    icon='calculator',
    layout=widgets.Layout(width='350px', height='45px')
)
output_area = widgets.Output()

def on_hesapla_clicked(b):
    with output_area:
        clear_output(wait=True)
        try:
            result = hesapla()
            
            # Sonuçları göster
            display(HTML(f"<h3>Proje Raporu: {result['en']}m x {result['boy']}m = {result['alan']:.2f} m²</h3>"))
            
            if not result['profil_analizi'].empty:
                display(HTML("<h4>Çelik Profil Analizi</h4>"))
                # Formatlı çelik profil analizi göster
                formatted_profil = result['profil_analizi'].copy()
                formatted_profil['Birim Fiyat (€)'] = formatted_profil['Birim Fiyat (€)'].apply(format_currency)
                formatted_profil['Toplam (€)'] = formatted_profil['Toplam (€)'].apply(format_currency)
                display(formatted_profil)
            
            display(HTML("<h4>Maliyet Dökümü</h4>"))
            display(result['maliyet_dokum'])
            
            display(HTML("<h4>Finansal Özet</h4>"))
            display(result['finansal_ozet'])
            
            if result['notlar']:
                display(HTML(f"<h4>Özel Notlar</h4><p><i>{result['notlar']}</i></p>"))
            
            # Logo verisini al
            logo_data = get_company_logo()
            
            # PDF'leri oluştur
            teklif_pdf = musteri_pdf_olustur(
                result['satis_fiyati'], 
                result['proje_bilgileri'], 
                result['notlar'],
                result['customer_info'],
                logo_data
            )
            
            maliyet_pdf = maliyet_raporu_pdf_olustur(
                result['proje_bilgileri'],
                result['maliyet_dokum'],
                result['finansal_ozet'],
                result['profil_analizi'],
                result['customer_info'],
                logo_data
            )
            
            # PDF indirme linkleri
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            teklif_filename = f"Teklif_Formu_{timestamp}.pdf"
            maliyet_filename = f"Maliyet_Raporu_{timestamp}.pdf"
            
            display(HTML(f"""
            <div class="pdf-container">
                <h4>PDF DOSYALARINI İNDİR</h4>
                {create_pdf_download_link(teklif_pdf, teklif_filename)}
                {create_pdf_download_link(maliyet_pdf, maliyet_filename)}
                <p style="margin-top: 20px; font-size: 14px; color: #555;">
                    PDF'leri indirmek için yukarıdaki butonları kullanın.<br>
                    Tarayıcınız PDF'leri doğrudan açmayı tercih edebilir.
                </p>
            </div>
            """))
            
        except Exception as e:
            import traceback
            display(HTML(f"<div style='color:red; background-color:#ffe8e8; padding:15px; border-radius:8px; margin-top:20px;'><b>Hata:</b> {str(e)}<br>{traceback.format_exc()}</div>"))

hesapla_button.on_click(on_hesapla_clicked)

# Butonu ve çıktı alanını görüntüle
display(hesapla_button)
display(output_area)
